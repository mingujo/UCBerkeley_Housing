require 'rails_helper'
require 'time'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SessionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:ca_id => "1", :start_time => Time.now, :end_time => Time.now+30.minutes}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }
  
  let(:valid_session) { {} }
  
  describe "DELETE #destroy" do
    it "destroys the requested event" do
      expect {
        delete :destroy, {:id => '7'}
      }.to change(Event.all, :count).by(-1).and change(Timeslot.all, :count).by(-1)
    end
    
    it "destroys the requested event series" do
      expect {
        delete :destroy, {:id => '8', :delete_all => "true"}
      }.to change(Event.all, :count).by(-2).and change(Timeslot.all, :count).by(-2)
    end
  end
end