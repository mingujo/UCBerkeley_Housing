require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EventsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:ca_id => "1", :start_time => Time.now, :end_time => Time.now+1.hour}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }
  
  let(:valid_session) { {} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventsController. Be sure to keep this updated too.


  describe "GET #index" do
    "index method doesnt do anything"
  end
  
  
  describe "GET #get_events" do
    it "gets all events" do
      event1 = FactoryGirl.create(:event, :ca_id => 1)
      event2 = FactoryGirl.create(:event, :ca_id => 2)
      get :get_events, start: "1477810800", end: "1481443200"
      expect(assigns(:events)).to include(event1)
      expect(assigns(:events)).to include(event2)
    end
  end


  describe "GET #new" do
    before :each do
    @temp_event = double("Event",            
        'start_time(1i)' => 2016, 
        'start_time(2i)' => 11,
        'start_time(3i)' => 11, 
        'start_time(4i)' => 8, 
        'start_time(5i)' => 0,
        'end_time(1i)' =>2016, 
        'end_time(2i)' =>12, 
        'end_time(3i)' =>1, 
        'end_time(4i)' =>8, 
        'end_time(5i)' =>30,
        :id => 2,
        :ca_id => "3",
        :period => "Does not repeat"
      )

      @temp_ca = double("Ca", :user_id => "3")  
      expect(Ca).to receive(:find).with("3").and_return(@temp_ca)
    end 
    
    it "renders new template" do
        get :new, {:ca_id => '3'}
        expect(response).to render_template("events/_form")
    end   
  end


describe "GET #edit" do
   before :each do
       @temp_event = double("Event",            
           'start_time(1i)' => 2016, 
           'start_time(2i)' => 11,
           'start_time(3i)' => 11, 
           'start_time(4i)' => 8, 
           'start_time(5i)' => 0,
           'end_time(1i)' =>2016, 
           'end_time(2i)' =>12, 
           'end_time(3i)' =>1, 
           'end_time(4i)' =>8, 
           'end_time(5i)' =>30,
           :id => 2,
           :ca_id => 3,
           :period => "Does not repeat"
       )
       expect(Event).to receive(:find_by_id).with("2").and_return(@temp_event)
   end
   it "renders edit template" do
       get :edit, {:id => '2'}
       expect(response).to render_template("events/_edit_form")
   end    
 end

 describe "POST #create" do
   context "with valid params" do
    it "creates a new Event" do
      # @temp_event = double("Event", :id=>"1", :starttime => Time.now, :endtime => Time.now+1.hours, :period => "Does not repeat")
      expect {
        post :create, {:event => {
          'start_time(1i)' => 2016, 
          'start_time(2i)' => 11,
          'start_time(3i)' => 11, 
          'start_time(4i)' => 8, 
          'start_time(5i)' => 0,
          'end_time(1i)' =>2016, 
          'end_time(2i)' =>12, 
          'end_time(3i)' =>1, 
          'end_time(4i)' =>8, 
          'end_time(5i)' =>30,
          :id => 2,
          :ca_id => 3,
          :period => "Does not repeat"}}
        }.to change(Event, :count).by(1)
    end
     
    it "creates a new event series" do
      expect {
        post :create, {:event => {
          'start_time(1i)' => 2016, 
          'start_time(2i)' => 11,
          'start_time(3i)' => 11, 
          'start_time(4i)' => 8, 
          'start_time(5i)' => 0,
          'end_time(1i)' =>2016, 
          'end_time(2i)' =>12, 
          'end_time(3i)' =>1, 
          'end_time(4i)' =>8, 
          'end_time(5i)' =>30,
          :id => 2,
          :period => 'Weekly'
        }}
        }.to change(EventSeries, :count).by(1)
    end
   end
 end
     


  #   context "with invalid params" do
  #     it "assigns a newly created but unsaved event as @event" do
  #       post :create, params: {event: invalid_attributes}, session: valid_session
  #       expect(assigns(:event)).to be_a_new(Event)
  #     end

  #     it "re-renders the 'new' template" do
  #       post :create, params: {event: invalid_attributes}, session: valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested event" do
        event = FactoryGirl.create(:event)
        new_event = FactoryGirl.create(:event, :start_time => "2016-11-16 00:00:00", :end_time => "2016-11-16 00:00:01")
        put :update, id: event.to_param, event: new_event.attributes
        event.reload
        expect(assigns(:event).start_time).to eq("2016-11-16 00:00:00")
      end

      # it "assigns the requested event as @event" do
      #   event = Event.create! valid_attributes
      #   put :update, params: {id: event.to_param, event: valid_attributes}, session: valid_session
      #   expect(assigns(:event)).to eq(event)
      # end

    #   it "redirects to the event" do
    #     event = Event.create! valid_attributes
    #     put :update, params: {id: event.to_param, event: valid_attributes}, session: valid_session
    #     expect(response).to redirect_to(event)
    #   end
    # end

    # context "with invalid params" do
    #   it "assigns the event as @event" do
    #     event = Event.create! valid_attributes
    #     put :update, params: {id: event.to_param, event: invalid_attributes}, session: valid_session
    #     expect(assigns(:event)).to eq(event)
    #   end

      # it "re-renders the 'edit' template" do
      #   event = Event.create! valid_attributes
      #   put :update, params: {id: event.to_param, event: invalid_attributes}, session: valid_session
      #   expect(response).to render_template("edit")
      # end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested event" do
      event = FactoryGirl.create(:event)
      expect {
        delete :destroy, id: event.to_param
      }.to change(Event.all, :count).by(-1)
    end
  end

#     it "redirects to the events list" do
#       event = Event.create! valid_attributes
#       delete :destroy, params: {id: event.to_param}, session: valid_session
#       expect(response).to redirect_to(events_url)
#     end
#   end

end
